{"version":3,"sources":["../../../src/api/admin/controller.js"],"names":["findOne","req","res","recordId","params","adminId","locals","userId","userType","ObjectId","isValid","Admin","findById","then","result","err","kind","message","findAll","find","limit","sort","createdAt","select","email","fullname","phone","address","update","data","body","record","newObject","updated","Date","now","password","helper","hashPassword","completeProfile","findByIdAndUpdate","destroy","console","log","findByIdAndRemove","name"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;AAEA;AACO,SAASA,OAAT,CAAiBC,GAAjB,EAAsBC,GAAtB,EAA2B;AAChC,MAAIC,QAAQ,GAAGF,GAAG,CAACG,MAAJ,CAAWC,OAAX,IAAsB,EAArC;AACA,oBAA6BH,GAAG,CAACI,MAAjC;AAAA,MAAQC,MAAR,eAAQA,MAAR;AAAA,MAAgBC,QAAhB,eAAgBA,QAAhB;AACA,MAAI,CAACD,MAAD,IAAW,CAACC,QAAhB,EACE,OAAO,qBAAKN,GAAL,EAAU,GAAV,EAAe,oCAAf,CAAP;AACF,MAAIM,QAAQ,KAAK,OAAjB,EACE,OAAO,qBACLN,GADK,EAEL,GAFK,8DAGgDM,QAHhD,EAAP;AAKF,MAAI,CAACL,QAAL,EAAeA,QAAQ,GAAGI,MAAX;AACf,MAAI,CAACE,gBAASC,OAAT,CAAiBP,QAAjB,CAAL,EACE,OAAO,qBAAKD,GAAL,EAAU,GAAV,EAAe,wCAAf,CAAP;AACF,SAAOS,kBAAMC,QAAN,CAAeT,QAAf,EACJU,IADI,CACC,UAACC,MAAD,EAAY;AAChB,QAAI,CAACA,MAAL,EAAa,OAAO,yBAASZ,GAAT,EAAc,yBAAd,CAAP;AACb,WAAO,wBAAQA,GAAR,EAAa,GAAb,EAAkBY,MAAlB,EAA0B,qCAA1B,CAAP;AACD,GAJI,WAKE,UAACC,GAAD,EAAS;AACd,QAAIA,GAAG,CAACC,IAAJ,KAAa,UAAjB,EAA6B;AAC3B,+BAASd,GAAT,wCAA6Ca,GAAG,CAACE,OAAjD;AACD;;AACD,WAAO,qBAAKf,GAAL,EAAU,GAAV,wCAA8Ca,GAAG,CAACE,OAAlD,EAAP;AACD,GAVI,CAAP;AAWD,C,CAED;;;AACO,SAASC,OAAT,CAAiBjB,GAAjB,EAAsBC,GAAtB,EAA2B;AAChC,SAAOS,kBAAMQ,IAAN,GACJC,KADI,CACE,EADF,EAEJC,IAFI,CAEC;AAAEC,IAAAA,SAAS,EAAE,CAAC;AAAd,GAFD,EAGJC,MAHI,CAGG;AACN;AACAC,IAAAA,KAAK,EAAE,IAFD;AAGNC,IAAAA,QAAQ,EAAE,IAHJ;AAINC,IAAAA,KAAK,EAAE,IAJD;AAKNC,IAAAA,OAAO,EAAE;AALH,GAHH,EAUJd,IAVI,CAUC,UAACC,MAAD,EAAY;AAChB,4BAAQZ,GAAR,EAAa,GAAb,EAAkBY,MAAlB,EAA0B,wCAA1B;AACD,GAZI,WAaE,UAACC,GAAD;AAAA,WACL,qBAAKb,GAAL,EAAU,GAAV,2CAAiDa,GAAG,CAACE,OAArD,EADK;AAAA,GAbF,CAAP;AAgBD,C,CAED;;;SACsBW,M;;EAuDtB;;;;0FAvDO,iBAAsB3B,GAAtB,EAA2BC,GAA3B;AAAA;;AAAA;AAAA;AAAA;AAAA;AACC2B,YAAAA,IADD,GACQ5B,GAAG,CAAC6B,IAAJ,IAAY,EADpB;AAAA,2BAEwB5B,GAAG,CAACI,MAF5B,EAEGC,MAFH,gBAEGA,MAFH,EAEWC,QAFX,gBAEWA,QAFX;;AAAA,kBAGD,CAACD,MAAD,IAAW,CAACC,QAHX;AAAA;AAAA;AAAA;;AAAA,6CAII,qBAAKN,GAAL,EAAU,GAAV,EAAe,oCAAf,CAJJ;;AAAA;AAAA,kBAKDM,QAAQ,KAAK,OALZ;AAAA;AAAA;AAAA;;AAAA,6CAMI,qBACLN,GADK,EAEL,GAFK,8DAGgDM,QAHhD,EANJ;;AAAA;AAAA,gBAYAqB,IAAI,CAACH,KAZL;AAAA;AAAA;AAAA;;AAAA,6CAaI,qBAAKxB,GAAL,EAAU,GAAV,EAAe,iDAAf,CAbJ;;AAAA;AAAA,gBAcA2B,IAAI,CAACF,OAdL;AAAA;AAAA;AAAA;;AAAA,6CAeI,qBAAKzB,GAAL,EAAU,GAAV,EAAe,mDAAf,CAfJ;;AAAA;AAAA,gBAgBA2B,IAAI,CAACJ,QAhBL;AAAA;AAAA;AAAA;;AAAA,6CAiBI,qBAAKvB,GAAL,EAAU,GAAV,EAAe,4CAAf,CAjBJ;;AAAA;AAmBD6B,YAAAA,MAnBC,GAmBQ,EAnBR;AAAA;AAAA;AAAA,mBAqBYpB,kBAAMC,QAAN,CAAeL,MAAf,CArBZ;;AAAA;AAqBHwB,YAAAA,MArBG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAuBI,qBAAK7B,GAAL,EAAU,GAAV,EAAe,kCAAf,CAvBJ;;AAAA;AAAA,gBAyBA6B,MAzBA;AAAA;AAAA;AAAA;;AAAA,6CAyBe,yBAAS7B,GAAT,EAAc,iBAAd,CAzBf;;AAAA;AA2BC8B,YAAAA,SA3BD,GA2Ba,EA3Bb;AA4BLA,YAAAA,SAAS,CAACC,OAAV,GAAoBC,IAAI,CAACC,GAAL,EAApB;AACA,gBAAIN,IAAI,CAACJ,QAAT,EAAmBO,SAAS,CAACP,QAAV,GAAqBI,IAAI,CAACJ,QAA1B;AACnB,gBAAII,IAAI,CAACH,KAAT,EAAgBM,SAAS,CAACN,KAAV,GAAkBG,IAAI,CAACH,KAAvB;AAChB,gBAAIG,IAAI,CAACF,OAAT,EAAkBK,SAAS,CAACL,OAAV,GAAoBE,IAAI,CAACF,OAAzB;;AA/Bb,iBAiCDE,IAAI,CAACO,QAjCJ;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAkCwBC,MAAM,CAACC,YAAP,CAAoBT,IAAI,CAACO,QAAzB,CAlCxB;;AAAA;AAkCHJ,YAAAA,SAAS,CAACI,QAlCP;;AAAA;AAmCLJ,YAAAA,SAAS,CAACO,eAAV,GAA4B,IAA5B;AAnCK,6CAqCE5B,kBAAM6B,iBAAN,CAAwBjC,MAAxB,EAAgCyB,SAAhC,EAA2C;AAAE,qBAAK;AAAP,aAA3C,EACJnB,IADI,CACC,UAACC,MAAD,EAAY;AAChB,kBAAI,CAACA,MAAL,EACE,OAAO,yBACLZ,GADK,4DAE8CK,MAF9C,EAAP;AAIF,qBAAO,wBAAQL,GAAR,EAAa,GAAb,EAAkBY,MAAlB,EAA0B,uCAA1B,CAAP;AACD,aARI,WASE,UAACC,GAAD;AAAA,qBACL,qBACEb,GADF,EAEE,GAFF,0CAGmCK,MAHnC,kBAGiDQ,GAAG,CAACE,OAHrD,EADK;AAAA,aATF,CArCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAwDewB,O;;;;;2FAAf,kBAAuBxC,GAAvB,EAA4BC,GAA5B;AAAA;;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,QADD,GACYF,GAAG,CAACG,MAAJ,CAAWC,OAAX,IAAsB,EADlC;;AAAA,gBAEAF,QAFA;AAAA;AAAA;AAAA;;AAAA,8CAEiB,qBAAKD,GAAL,EAAU,GAAV,EAAe,mCAAf,CAFjB;;AAAA;AAAA,gBAGAO,gBAASC,OAAT,CAAiBP,QAAjB,CAHA;AAAA;AAAA;AAAA;;AAAA,8CAII,qBAAKD,GAAL,EAAU,GAAV,EAAe,wCAAf,CAJJ;;AAAA;AAAA,2BAMwBA,GAAG,CAACI,MAN5B,EAMGC,MANH,gBAMGA,MANH,EAMWC,QANX,gBAMWA,QANX;AAOLkC,YAAAA,OAAO,CAACC,GAAR,CAAYxC,QAAZ;AACAuC,YAAAA,OAAO,CAACC,GAAR,CAAYpC,MAAZ;;AARK,kBAUD,CAACA,MAAD,IAAW,CAACC,QAVX;AAAA;AAAA;AAAA;;AAAA,8CAWI,qBAAKN,GAAL,EAAU,GAAV,EAAe,oCAAf,CAXJ;;AAAA;AAAA,kBAaDM,QAAQ,KAAK,OAbZ;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,8CAgBI,qBACLN,GADK,EAEL,GAFK,kEAGoDM,QAHpD,EAhBJ;;AAAA;AAAA,8CAsBEG,kBAAMiC,iBAAN,CAAwBzC,QAAxB,EACJU,IADI,CACC,UAACkB,MAAD,EAAY;AAChB,kBAAI,CAACA,MAAL,EAAa,OAAO,yBAAS7B,GAAT,qCAA0CC,QAA1C,EAAP;AACb,qBAAO,wBAAQD,GAAR,EAAa,GAAb,EAAkB,EAAlB,EAAsB,8BAAtB,CAAP;AACD,aAJI,WAKE,UAACa,GAAD,EAAS;AACd,kBAAIA,GAAG,CAACC,IAAJ,KAAa,UAAb,IAA2BD,GAAG,CAAC8B,IAAJ,KAAa,UAA5C,EAAwD;AACtD,uBAAO,yBACL3C,GADK,4CAE8BC,QAF9B,iBAE6CY,GAAG,CAACE,OAFjD,EAAP;AAID;;AACD,qBAAO,qBACLf,GADK,EAEL,GAFK,mDAGqCC,QAHrC,iBAGoDY,GAAG,CAACE,OAHxD,EAAP;AAKD,aAjBI,CAtBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import Admin, { ObjectId } from \"./model\";\nimport { success, fail, notFound } from \"../../services/helpers/responses\";\nimport * as helper from \"../../services/helpers\";\n\n// Retrieve a single record with a given adminId\nexport function findOne(req, res) {\n  let recordId = req.params.adminId || \"\";\n  const { userId, userType } = res.locals;\n  if (!userId || !userType)\n    return fail(res, 400, \"Invalid authentication credentials\");\n  if (userType !== \"admin\")\n    return fail(\n      res,\n      422,\n      `Only Admins are allowed to access this record not ${userType}`\n    );\n  if (!recordId) recordId = userId;\n  if (!ObjectId.isValid(recordId))\n    return fail(res, 422, \"Invalid record Id as request parameter\");\n  return Admin.findById(recordId)\n    .then((result) => {\n      if (!result) return notFound(res, \"Error record not found.\");\n      return success(res, 200, result, \"retrieving record was successfully!\");\n    })\n    .catch((err) => {\n      if (err.kind === \"ObjectId\") {\n        notFound(res, `Error retrieving record.\\r\\n${err.message}`);\n      }\n      return fail(res, 500, `Error retrieving record.\\r\\n${err.message}`);\n    });\n}\n\n// / Retrieve and return all records from the database.\nexport function findAll(req, res) {\n  return Admin.find()\n    .limit(20)\n    .sort({ createdAt: -1 })\n    .select({\n      // eslint-disable-next-line object-property-newline\n      email: true,\n      fullname: true,\n      phone: true,\n      address: true,\n    })\n    .then((result) => {\n      success(res, 200, result, \"retrieving record(s) was successfully!\");\n    })\n    .catch((err) =>\n      fail(res, 500, `Error retrieving record(s).\\r\\n${err.message}`)\n    );\n}\n\n// Update a admin\nexport async function update(req, res) {\n  const data = req.body || {};\n  const { userId, userType } = res.locals;\n  if (!userId || !userType)\n    return fail(res, 400, \"Invalid authentication credentials\");\n  if (userType !== \"admin\")\n    return fail(\n      res,\n      422,\n      `Only Admins are allowed to update this record not ${userType}`\n    );\n  // Validate request\n  if (!data.phone)\n    return fail(res, 422, \"phone cannot be empty and must be alphanumeric.\");\n  if (!data.address)\n    return fail(res, 422, \"address cannot be empty and must be alphanumeric.\");\n  if (!data.fullname)\n    return fail(res, 422, \"You must provide an alphanumeric full name\");\n\n  let record = {};\n  try {\n    record = await Admin.findById(userId);\n  } catch (err) {\n    return fail(res, 422, \"Error fetching Admin information\");\n  }\n  if (!record) return notFound(res, \"Admin not found\");\n\n  const newObject = {};\n  newObject.updated = Date.now();\n  if (data.fullname) newObject.fullname = data.fullname;\n  if (data.phone) newObject.phone = data.phone;\n  if (data.address) newObject.address = data.address;\n\n  if (data.password)\n    newObject.password = await helper.hashPassword(data.password);\n  newObject.completeProfile = true;\n\n  return Admin.findByIdAndUpdate(userId, newObject, { new: true })\n    .then((result) => {\n      if (!result)\n        return notFound(\n          res,\n          `Error: newly submitted record not found with id ${userId}`\n        );\n      return success(res, 200, result, \"Record has been created successfully!\");\n    })\n    .catch((err) =>\n      fail(\n        res,\n        500,\n        `Error updating record with id ${userId}.\\r\\n${err.message}`\n      )\n    );\n}\n\n// Delete a admin with the specified adminId in the request\nexport async function destroy(req, res) {\n  const recordId = req.params.adminId || \"\";\n  if (!recordId) return fail(res, 400, \"No record Id as request parameter\");\n  if (!ObjectId.isValid(recordId))\n    return fail(res, 422, \"Invalid record Id as request parameter\");\n\n  const { userId, userType } = res.locals;\n  console.log(recordId);\n  console.log(userId);\n\n  if (!userId || !userType)\n    return fail(res, 400, \"Invalid authentication credentials\");\n\n  if (userType === \"admin\") {\n    // we are cool!\n  } else {\n    return fail(\n      res,\n      422,\n      `Only super Admin is allowed to delete this record not ${userType}`\n    );\n  }\n  return Admin.findByIdAndRemove(recordId)\n    .then((record) => {\n      if (!record) return notFound(res, `Record not found with id ${recordId}`);\n      return success(res, 200, [], \"Record deleted successfully!\");\n    })\n    .catch((err) => {\n      if (err.kind === \"ObjectId\" || err.name === \"NotFound\") {\n        return notFound(\n          res,\n          `Error: record not found with id ${recordId}\\r\\n${err.message}`\n        );\n      }\n      return fail(\n        res,\n        500,\n        `Error: could not delete record with id ${recordId}\\r\\n${err.message}`\n      );\n    });\n}\n"],"file":"controller.js"}