{"version":3,"sources":["../../../src/api/auth/controller.js"],"names":["getUserModel","userType","user","Admin","User","isValidAdmin","req","res","next","accessToken","filter","params","jwt","verify","jwtSecret","payload","id","email","findOne","select","exec","then","admin","locals","userId","userEmail","userRole","role","error","isValidUser","device","fullname","emailSignup","body","password","phone","address","message","hash","newUser","completeProfile","create","result","err","emailLogin","match","save","currentUser","Promise","resolve","reject","sign","token","encrypted","console","log"],"mappings":"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","sourcesContent":["import Admin from \"../admin/model\";\nimport User from \"../../api/user/model\";\nimport { success, fail, notFound } from \"../../services/helpers/responses\";\nimport {\n  hashPassword,\n  findEmail,\n  comparePasswords,\n} from \"../../services/helpers\";\nimport jwt from \"jsonwebtoken\";\nimport { jwtSecret, encrypt, getToken } from \"../../services/helpers/jwt\";\n\nexport const getUserModel = (userType) => {\n  let user = null;\n  switch (userType) {\n    case \"admin\":\n      user = Admin;\n      break;\n    case \"user\":\n      user = User;\n      break;\n    default:\n      user = null;\n  }\n  return user;\n};\n\n// Authorize to access admin protected route\nexport function isValidAdmin(req, res, next) {\n  const accessToken = getToken(req);\n  let filter;\n  if (!req.params) {\n    return fail(res, 403, \"Authentication failed: Invalid request parameters.\");\n  }\n  if (!accessToken) {\n    return fail(res, 403, \"Authencation faied: Undefined token.\");\n  }\n  try {\n    const {\n      payload: { id, email },\n    } = jwt.verify(accessToken, jwtSecret);\n    if (email) {\n      filter = { email };\n    }\n    return Admin.findOne(filter)\n      .select({ email: true })\n      .exec()\n      .then((admin) => {\n        if (!admin) {\n          return notFound(\n            res,\n            `Admin with email ${email} not found in database`\n          );\n        }\n        res.locals.userId = id;\n        res.locals.userType = \"admin\";\n        res.locals.userEmail = email;\n        res.locals.userRole = admin.role;\n        return next();\n      });\n  } catch (error) {\n    return fail(res, 401, \"User verification failed\");\n  }\n}\n\n// / Authorize to access user protected route\nexport function isValidUser(req, res, next) {\n  const accessToken = getToken(req);\n  let filter;\n  if (!req.params) {\n    return fail(res, 403, \"Authentication failed: Invalid request parameters.\");\n  }\n  if (!accessToken) {\n    return fail(res, 403, \"Authencation faied: Undefined token.\");\n  }\n  try {\n    const {\n      payload: { id, email, device },\n    } = jwt.verify(accessToken, jwtSecret);\n    if (email) {\n      filter = { email };\n    }\n    return User.findOne(filter)\n      .select({ email: true, fullname: true })\n      .exec()\n      .then((user) => {\n        if (!user) {\n          return notFound(\n            res,\n            `User with email ${email} not found in database`\n          );\n        }\n        res.locals.userId = id;\n        res.locals.userType = \"user\";\n        res.locals.userEmail = email;\n        res.locals.userRole = \"user\";\n        return next();\n      });\n  } catch (error) {\n    return fail(res, 401, \"User verification failed\");\n  }\n}\n\n// Sigup route\nexport const emailSignup = async (req, res) => {\n  const { email, password, fullname, phone, address } = req.body;\n  const { userType } = req.params;\n  if (!email || !password) {\n    return fail(res, 401, \"Request should have an Email and Password\");\n  }\n\n  if (!fullname) {\n    return fail(res, 422, \"fullname cannot be empty and must be alphanumeric\");\n  }\n  if (!phone) {\n    return fail(\n      res,\n      422,\n      \"Phone number cannot be empty and must be alphanumeric\"\n    );\n  }\n  if (!address) {\n    return fail(res, 422, \"Address cannot be empty and must be alphanumeric\");\n  }\n\n  if (!req.params) {\n    return fail(res, 403, \"Authentication Failed: invalid request parameters.\");\n  }\n  const User = getUserModel(userType);\n  if (!User) return fail(res, 401, \"Unknown user type!\");\n\n  let user;\n\n  try {\n    user = (await findEmail(User, email)) || {};\n  } catch (err) {\n    return fail(\n      res,\n      500,\n      `Error finding user with email ${email}. ${err.message}`\n    );\n  }\n\n  if (user && email === user.email) {\n    return fail(res, 500, `User with email already exist. ${email}`);\n  }\n\n  let completeProfile;\n\n  return hashPassword(password)\n    .then(async (hash) => {\n      const newUser = new User({\n        email: email,\n        password: hash,\n        completeProfile,\n        phone: phone,\n        fullname: fullname,\n        address: address,\n      });\n      await User.create(newUser).then((result) => {\n        if (!result) {\n          return fail(res, 404, \"Error not found newly added user\");\n        }\n        return success(\n          res,\n          200,\n          result,\n          \"New user record has been created successfully\"\n        );\n      });\n    })\n    .catch((err) =>\n      fail(res, 500, `Error encrypting user password. ${err.message}`)\n    );\n};\n\n// Login route\nexport async function emailLogin(req, res) {\n  const { email, password } = req.body;\n  const { userType } = req.params;\n  if (!userType) {\n    return fail(res, 403, \"Authentication Failed: invalid request parameters.\");\n  }\n  if (!email || !password) {\n    return fail(res, 401, \"Request should have an Email and Password\");\n  }\n  const User = getUserModel(userType);\n  if (!User) return fail(res, 401, \"Unknown user type!\");\n  let currentUser;\n  let user;\n  try {\n    user = (await findEmail(User, email)) || {};\n  } catch (err) {\n    return fail(\n      res,\n      500,\n      `Error finding user with email ${email}. ${err.message}`\n    );\n  }\n  if (!user.email) {\n    return fail(res, 500, `Could not find user with email ${email}`);\n  }\n\n  const match = await comparePasswords(password, user.password);\n  // //////////////////////////////////////////////////\n  // Step 4: Create JWT\n  // //////////////////////////////////////////////////\n  if (match) {\n    return user\n      .save()\n      .then((result) => {\n        currentUser = result;\n        return new Promise((resolve, reject) => {\n          jwt.sign(\n            {\n              payload: {\n                id: result.id,\n                email,\n              },\n            },\n            jwtSecret,\n            (err, token) => {\n              if (err) reject(err);\n              resolve(token);\n            }\n          );\n        });\n      })\n      .then((accessToken) => {\n        try {\n          const encrypted = encrypt(accessToken);\n          return success(\n            res,\n            200,\n            { accessToken: encrypted, id: currentUser.id },\n            \"Authentication successful!\"\n          );\n        } catch (err) {\n          console.log(err);\n          return fail(res, 401, \"Unable to generate an access token\");\n        }\n      })\n      .catch((err) => {\n        return fail(res, 500, \"Unable to authenticate user\", err);\n      });\n  }\n  return fail(\n    res,\n    403,\n    \"Authentication Failed: invalid credentials. Email or password is not correct\"\n  );\n}\n"],"file":"controller.js"}