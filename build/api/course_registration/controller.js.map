{"version":3,"sources":["../../../src/api/course_registration/controller.js"],"names":["findcourseByUser","userId","Course","findOne","user","then","result","create","req","res","data","body","locals","userType","courseName","newObject","date","Date","now","course","save","err","message","findAll","find","limit","sort","createdAt","populate","path","select","status"],"mappings":"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","sourcesContent":["import Course from \"./model\";\nimport { success, fail, notFound } from \"../../services/helpers/responses\";\nimport { findUserById } from \"../user/contoller\";\n\nexport const findcourseByUser = (userId) => {\n  return Course.findOne({ user: userId }).then((result) => {\n    return result;\n  });\n};\n\n// Course registration\nexport const create = async (req, res) => {\n  const data = req.body || {};\n  const { userId, userType } = res.locals;\n  if (userType !== \"user\") {\n    return fail(\n      res,\n      422,\n      `Only Users are allowed to create a course not ${userType}`\n    );\n  }\n  // validate request\n  if (!data.courseName) {\n    return fail(\n      res,\n      422,\n      \"Course name can not be empty and must be alphanumeric.\"\n    );\n  }\n\n  let user;\n  try {\n    user = await findUserById(userId);\n  } catch (error) {\n    return fail(res, 422, \"Unable to find User Information\");\n  }\n  if (!user) return fail(res, 422, \"Unable to find User information\");\n\n  const newObject = {};\n  newObject.user = userId;\n  newObject.date = Date.now();\n  if (data.courseName) newObject.courseName = data.courseName;\n\n  // create a course\n  const course = new Course(newObject);\n\n  // Save course to database\n  return course\n    .save()\n    .then((result) => {\n      if (!result) {\n        return notFound(res, 404, \"Error not found newly added course\");\n      }\n      return success(\n        res,\n        200,\n        result,\n        \"New course record has been created successfully\"\n      );\n    })\n    .catch((err) => {\n      fail(res, 500, `Error occured while creating the course. ${err.message}`);\n    });\n};\n\n// / Retrieve and return all records from the database.\nexport function findAll(req, res) {\n  return Course.find()\n    .limit(500)\n    .sort({ createdAt: -1 })\n    .populate({\n      path: \"user\",\n      select: \"id fullname phone address email completeProfile\",\n    })\n    .select({\n      // eslint-disable-next-line object-property-newline\n      courseName: true,\n      status: true,\n      date: true,\n    })\n    .then((result) => {\n      return success(\n        res,\n        200,\n        result,\n        \"retrieving record(s) was successfully!\"\n      );\n    })\n    .catch((err) =>\n      fail(res, 500, `Error retrieving record(s).\\r\\n${err.message}`)\n    );\n}\n"],"file":"controller.js"}