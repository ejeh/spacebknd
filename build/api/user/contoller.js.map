{"version":3,"sources":["../../../src/api/user/contoller.js"],"names":["findUserById","userId","User","findById","select","fullname","phone","address","then","user","err","findOne","req","res","recordId","params","locals","userType","ObjectId","isValid","result","kind","message","findAll","find","limit","sort","createdAt","email","completeProfile","update","data","body","userEmail","record","isComplete","newObject","updated","Date","now","toLowerCase","password","helper","hashPassword","findByIdAndUpdate","destroy","findByIdAndRemove","name"],"mappings":"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","sourcesContent":["import User, { ObjectId } from \"./model\";\nimport { success, fail, notFound } from \"../../services/helpers/responses\";\nimport * as helper from \"../../services/helpers\";\n\n/**\n * @description findUserById find a particular user by id\n * @param {String} userId user id\n * @returns {Promise} user object promise\n */\nexport function findUserById(userId) {\n  return User.findById(userId)\n    .select({\n      fullname: true,\n      phone: true,\n      address: true,\n    })\n\n    .then((user) => {\n      if (!user) return {};\n      return user;\n    })\n    .catch((err) => {\n      throw err;\n    });\n}\n\n// Retrieve a single record with a given userId\nexport function findOne(req, res) {\n  let recordId = req.params.userId || \"\";\n  const { userId, userType } = res.locals;\n  if (!userId || !userType)\n    return fail(res, 400, \"Invalid authentication credentials\");\n  if (userType !== \"user\")\n    return fail(\n      res,\n      422,\n      `Only Users are allowed to view this record not ${userType}`\n    );\n  if (!recordId) recordId = userId;\n  if (!ObjectId.isValid(recordId))\n    return fail(res, 422, \"Invalid record Id as request parameter\");\n  return User.findById(recordId)\n    .then((result) => {\n      if (!result) return notFound(res, \"Error record not found.\");\n      return success(res, 200, result, \"retrieving record was successfully!\");\n    })\n    .catch((err) => {\n      if (err.kind === \"ObjectId\") {\n        notFound(res, `Error retrieving record.\\r\\n${err.message}`);\n      }\n      return fail(res, 500, `Error retrieving record.\\r\\n${err.message}`);\n    });\n}\n\n// / Retrieve and return all records from the database.\nexport function findAll(req, res) {\n  return User.find()\n    .limit(500)\n    .sort({ createdAt: -1 })\n    .select({\n      // eslint-disable-next-line object-property-newline\n      email: true,\n      fullname: true,\n      phone: true,\n      address: true,\n      completeProfile: true,\n    })\n    .then((result) => {\n      return success(\n        res,\n        200,\n        result,\n        \"retrieving record(s) was successfully!\"\n      );\n    })\n    .catch((err) =>\n      fail(res, 500, `Error retrieving record(s).\\r\\n${err.message}`)\n    );\n}\n\n// Update a user\nexport async function update(req, res) {\n  const data = req.body || {};\n  const { userId, userType, userEmail } = res.locals;\n  if (!userId || !userType)\n    return fail(res, 400, \"Invalid authentication credentials\");\n  if (userType !== \"user\")\n    return fail(\n      res,\n      422,\n      `Only Users are allowed to update this record not ${userType}`\n    );\n  // Validate request\n  if (!userEmail && !data.email)\n    return fail(res, 422, \"You must provide an alphanumeric email address\");\n\n  if (!data.fullname)\n    return fail(res, 422, \"You must provide an alphanumeric full name\");\n\n  if (!data.phone)\n    return fail(res, 422, \"You must provide an alphanumeric phone number\");\n\n  if (!data.address)\n    return fail(res, 422, \"You must provide an alphanumeric address\");\n\n  let record = {};\n  try {\n    record = await User.findById(userId);\n  } catch (err) {\n    return fail(res, 422, \"Error fetching User information\");\n  }\n  if (!record) return notFound(res, \"User not found\");\n  const isComplete = record.completeProfile;\n\n  const newObject = {};\n  newObject.updated = Date.now();\n  if (data.fullname) newObject.fullname = data.fullname;\n  if (data.phone) newObject.phone = data.phone;\n  if (data.address) newObject.address = data.address;\n\n  if (!isComplete && data.email !== \"\") {\n    if (!userEmail) newObject.email = data.email.toLowerCase();\n  }\n  if (data.password)\n    newObject.password = await helper.hashPassword(data.password);\n  newObject.completeProfile = true;\n\n  return User.findByIdAndUpdate(userId, newObject, { new: true })\n    .then((result) => {\n      if (!result)\n        return notFound(\n          res,\n          `Error: newly submitted record not found with id ${userId}`\n        );\n      return success(res, 200, result, \"Record has been created successfully!\");\n    })\n    .catch((err) =>\n      fail(\n        res,\n        500,\n        `Error updating record with id ${userId}.\\r\\n${err.message}`\n      )\n    );\n}\n\n// Delete an admin with the specified adminId in the request\nexport async function destroy(req, res) {\n  const recordId = req.params.userId || \"\";\n  const { userId, userType } = res.locals;\n  if (!recordId) return fail(res, 400, \"No record Id as request parameter\");\n  if (!ObjectId.isValid(recordId))\n    return fail(res, 422, \"Invalid record Id as request parameter\");\n\n  if (!userId || !userType) {\n    return fail(res, 400, \"Invalid authentication credentials\");\n  }\n\n  return User.findByIdAndRemove(recordId)\n    .then((record) => {\n      if (!record) return notFound(res, `Record not found with id ${recordId}`);\n      return success(res, 200, [], \"Record deleted successfully!\");\n    })\n    .catch((err) => {\n      if (err.kind === \"ObjectId\" || err.name === \"NotFound\") {\n        return notFound(\n          res,\n          `Error: record not found with id ${recordId}\\r\\n${err.message}`\n        );\n      }\n      return fail(\n        res,\n        500,\n        `Error: could not delete record with id ${recordId}\\r\\n${err.message}`\n      );\n    });\n}\n"],"file":"contoller.js"}