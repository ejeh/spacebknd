{"version":3,"sources":["../../../src/api/payment/controller.js"],"names":["create","req","res","data","body","locals","userId","userType","full_name","email","amount","user","course","newObject","metadata","dateOfPayment","Date","now","id","error","response","JSON","parse","console","log","redirect","authorization_url","find","ref","query","reference","date","customer","newPayment","payment","Payment","save","then","err","message","findAll","limit","sort","createdAt","populate","path","select","result"],"mappings":"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","sourcesContent":["import Payment from \"./model\";\nimport { success, fail, notFound } from \"../../services/helpers/responses\";\nimport { findUserById } from \"../user/contoller\";\nimport { findcourseByUser } from \"../course_registration/controller\";\nimport { initializePayment, verifyPayment } from \"./paystack\";\nimport _ from \"lodash\";\n\nexport const create = async (req, res) => {\n  const data = req.body || {};\n  const { userId, userType } = res.locals;\n\n  if (userType !== \"user\") {\n    return fail(\n      res,\n      422,\n      `Only Users are allowed to create payment not ${userType}`\n    );\n  }\n\n  // Validate request\n  if (!data.full_name) {\n    return fail(\n      res,\n      422,\n      \"Full name can not be empty and must be alphanumeric.\"\n    );\n  }\n\n  if (!data.email) {\n    return fail(res, 422, \"Email can not be empty and must be alphanumeric.\");\n  }\n\n  if (!data.amount) {\n    return fail(\n      res,\n      422,\n      \"Course name can not be empty and must be alphanumeric.\"\n    );\n  }\n\n  let user;\n  try {\n    user = await findUserById(userId);\n  } catch (error) {\n    return fail(res, 422, \"Unable to find User Information\");\n  }\n  if (!user) return fail(res, 422, \"Unable to find User information\");\n\n  let course;\n  try {\n    course = await findcourseByUser(userId);\n    if (!course) return fail(res, 422, \"Unable to detect Finder course\");\n  } catch (err) {\n    return fail(res, 500, \"Unable to  complete request\");\n  }\n\n  const newObject = {};\n  newObject.metadata = {\n    full_name: data.full_name,\n    user: userId,\n    dateOfPayment: Date.now(),\n    course: course.id,\n  };\n  if (data.amount) newObject.amount = data.amount *= 100;\n  if (data.email) newObject.email = data.email;\n\n  initializePayment(newObject, (error, body) => {\n    if (error) {\n      if (error) {\n        return fail(\n          res,\n          502,\n          \"network error! Please check your internet connection\"\n        );\n      }\n    }\n    const response = JSON.parse(body);\n    console.log(response);\n    res.redirect(response.data.authorization_url);\n  });\n};\n\n// Retrive data from paystack  with a given reference and save in mongodb database\nexport const find = (req, res) => {\n  const ref = req.query.reference;\n\n  verifyPayment(ref, (error, body) => {\n    if (error) {\n      return fail(\n        res,\n        502,\n        \"network error! Please check your internet connection\"\n      );\n    }\n\n    const response = JSON.parse(body);\n    const { reference, amount } = response.data;\n    const { full_name, user, date, course } = response.data.metadata;\n    const { email } = response.data.customer;\n\n    const newPayment = {\n      reference,\n      amount,\n      email,\n      full_name,\n      user,\n      date,\n      course,\n    };\n\n    const payment = new Payment(newPayment);\n    payment\n      .save()\n      .then((payment) => {\n        console.log(payment);\n        if (payment) {\n          return success(\n            res,\n            200,\n            payment,\n            \"retrieving record(s) was successfully!\"\n          );\n        }\n      })\n      .catch((err) => {\n        console.log(err.message);\n      });\n  });\n};\n\n// / Retrieve and return all records from the database.\nexport function findAll(req, res) {\n  return Payment.find()\n    .limit(500)\n    .sort({ createdAt: -1 })\n    .populate({\n      path: \"user\",\n      select: \"id fullname phone address email completeProfile\",\n    })\n    .populate({\n      path: \"course\",\n      select: \"id courseName\",\n    })\n    .select({\n      // eslint-disable-next-line object-property-newline\n      email: true,\n      full_name: true,\n      date: true,\n      amount: true,\n      course: true,\n      reference: true,\n    })\n    .then((result) => {\n      return success(\n        res,\n        200,\n        result,\n        \"retrieving record(s) was successfully!\"\n      );\n    })\n    .catch((err) =>\n      fail(res, 500, `Error retrieving record(s).\\r\\n${err.message}`)\n    );\n}\n"],"file":"controller.js"}