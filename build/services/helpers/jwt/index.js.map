{"version":3,"sources":["../../../../src/services/helpers/jwt/index.js"],"names":["dotenv","config","encryptor","process","env","JWT_ENCRYPTION_KEY","jwtSecret","JWT_SECRET","encrypt","obj","decrypt","encrypted","getToken","req","token","headers","authorization","split","query","decrypted","err"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEAA,mBAAOC,MAAP;;AAEA,IAAMC,SAAS,GAAG,iCAAgBC,OAAO,CAACC,GAAR,CAAYC,kBAA5B,CAAlB;AAEO,IAAMC,SAAS,GAAGH,OAAO,CAACC,GAAR,CAAYG,UAAZ,IAA0B,iBAA5C;AAEP;AACA;AACA;AACA;;;;AACO,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AAC3B,SAAOP,SAAS,CAACM,OAAV,CAAkBC,GAAlB,CAAP;AACD;AAED;AACA;AACA;AACA;;;AACO,SAASC,OAAT,CAAiBC,SAAjB,EAA4B;AACjC,SAAOT,SAAS,CAACQ,OAAV,CAAkBC,SAAlB,CAAP;AACD,C,CAED;;;AACO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAAS;AAC/B,MAAIC,KAAJ;;AACA,MACED,GAAG,CAACE,OAAJ,CAAYC,aAAZ,IACAH,GAAG,CAACE,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,MAA4C,QAF9C,EAGE;AACA;AACAH,IAAAA,KAAK,GAAGD,GAAG,CAACE,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAR;AACD,GAND,MAMO,IAAIJ,GAAG,CAACK,KAAJ,IAAaL,GAAG,CAACK,KAAJ,CAAUJ,KAA3B,EAAkC;AACvC;AACAA,IAAAA,KAAK,GAAGD,GAAG,CAACK,KAAJ,CAAUJ,KAAlB;AACD;;AACD,MAAI,CAACA,KAAL,EAAY,OAAO,IAAP;;AACZ,MAAI;AACF,QAAMK,SAAS,GAAGT,OAAO,CAACI,KAAD,CAAzB;AACA,WAAOK,SAAP;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZ,WAAO,IAAP;AACD;AACF,CAnBM","sourcesContent":["import SimpleEncryptor from \"simple-encryptor\";\nimport dotenv from \"dotenv\";\n\ndotenv.config();\n\nconst encryptor = SimpleEncryptor(process.env.JWT_ENCRYPTION_KEY);\n\nexport const jwtSecret = process.env.JWT_SECRET || \"SOME hidden key\";\n\n/**\n * @param {String} key the encryption key\n * @param {Object} obj the object or string to encrypt\n */\nexport function encrypt(obj) {\n  return encryptor.encrypt(obj);\n}\n\n/**\n * @param {String} key the encryption key\n * @param {String} encrypted the encrypted to be decrypted\n */\nexport function decrypt(encrypted) {\n  return encryptor.decrypt(encrypted);\n}\n\n// Retrieve token from request header\nexport const getToken = (req) => {\n  let token;\n  if (\n    req.headers.authorization &&\n    req.headers.authorization.split(\" \")[0] === \"Bearer\"\n  ) {\n    // eslint-disable-next-line prefer-destructuring\n    token = req.headers.authorization.split(\" \")[1];\n  } else if (req.query && req.query.token) {\n    // eslint-disable-next-line prefer-destructuring\n    token = req.query.token;\n  }\n  if (!token) return null;\n  try {\n    const decrypted = decrypt(token);\n    return decrypted;\n  } catch (err) {\n    return null;\n  }\n};\n"],"file":"index.js"}